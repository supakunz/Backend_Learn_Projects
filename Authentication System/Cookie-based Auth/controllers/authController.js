const User = require("../model/userModel");
const jwt = require("jsonwebtoken");
const AppError = require("../‡∏µutils/AppError");

// üéü ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT
const signToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, {
    expiresIn: "1d",
  });
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Cookie
const createSendToken = (user, res) => {
  const token = signToken(user._id);

  // Set cookie
  res.cookie("token", token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "Strict", // (None) => cross site, cookie ‡∏à‡∏∞ ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á ‡∏ñ‡πâ‡∏≤ user ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏°‡∏≤‡∏´‡∏≤‡πÄ‡∏£‡∏≤)
    maxAge: 24 * 60 * 60 * 1000, // 1 day
  });

  res.status(200).json({
    status: "success",
    user: {
      id: user._id,
      email: user.email,
    },
  });
};

// ‚úÖ Signup
exports.signup = async (req, res, next) => {
  try {
    const { email, password } = req.body;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    const user = await User.create({ email, password });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô cookie
    createSendToken(user, res);
  } catch (err) {
    next(err); // ‡∏™‡πà‡∏á err ‡πÉ‡∏´‡πâ middleware
  }
};

// ‚úÖ Login
exports.login = async (req, res, next) => {
  try {
    const { email, password } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• email, password
    if (!email || !password) {
      return next(new AppError("Please provide email and password", 400)); // ‡∏™‡πà‡∏á err ‡πÉ‡∏´‡πâ middleware => ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å AppError
    }

    // ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å email
    const user = await User.findOne({ email });
    if (!user || !(await user.comparePassword(password))) {
      return next(new AppError("Invalid email or password", 401));
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô cookie
    createSendToken(user, res);
  } catch (err) {
    next(err); // ‡∏™‡πà‡∏á err ‡πÉ‡∏´‡πâ middleware
  }
};

// ‚úÖ Logout
exports.logout = (req, res) => {
  // ‡∏™‡πà‡∏á cookie ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà browser ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  res.cookie("token", "", {
    httpOnly: true,
    expires: new Date(0), // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ cookie ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  });
  res.status(200).json({ status: "success", message: "Logged out" });
};
